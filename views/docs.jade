extends ./layout.jade

block title
  title Raziel - Documentation

block content
  div(class='page-header')
    h1 Raziel REST API 
      small v1
  
  div(class="row")
    div(class='col-md-10')
      h2 Background
      p
        | Raziel is a REST API and web service that implements a basic versioning file
        | system. There are not directories in the traditional sense, instead files can
        | be uploaded to arbitrary URLs. Files are versioned automatically and specific
        | versions can be tagged, similar to Git. Specific file versions or tags can be
        | queried and downloaded.
      
      p
        | The first user to upload a file to a specific URL determines if the file is going
        | to be write-protected. Files can can protected with an automatically generated
        | API key or an arbitrary password that does not have any complexity requirements.
        | Raziel is about freedom so all files are readable by everyone, as long as they
        | have the file's URL.
      
      p
        | URLs, like a traditional file system path, are heirarchial and can be queried.
        | Raziel tracks each file URL created and allows for traditional traversing of
        | uploaded files like a file system.

      p
        | Raziel was designed to be used inside of software development teams where flexible
        | file storage is required. The original use case was for hosting project
        | dependencies, libraries, and releases, including daily builds. Typically, these
        | are hosted in a simple web server with one person having an SSH key to upload
        | new versions. Raziel provides both a REST API for technical team members and a
        | simple web UI, that mimics a traditional file browser application, for
        | non-technical team members.

      h2 API Documentation
      
      p
        | Offical documentation for the Raziel REST API is available on Apiary:
        | <a href="http://docs.raziel.apiary.io/" target='_blank'>http://docs.raziel.apiary.io/</a>.
      
      h2 Examples
      
      p
        | The following example use the <a href="https://github.com/jkbrzt/httpie">httpie</a>
        | tool to interact with the REST API. httpie is user- and JSON-friendly.
      
      
      h3 Uploading Files
      
      h4 Upload Latest Release
      
      pre
        | $ http --form POST http://localhost:3000/v1/files/my-project/releases/latest \
        |         file@./release.tar.gz
      
      p
        | This example will be common will Raziel. Here, the <code>/my-project/releases/latest</code>
        | is a symbolic file that contains the latest release for the <code>my-project</code>
        | project.
      
      p
        | When downloaded, the previous file will be saved as <code>release.tar.gz</code>,
        | which isn't descriptive. This, we will set the name of the file on upload so that
        | when the file is downloaded, the file name is more desciptive.
      
      h4 Upload with an Explicit File Name
      
      pre
        | $ http --form POST http://localhost:3000/v1/files/my-project/releases/latest \
        |        file@./release.tar.gz \
        |        name=MyProject-1.2.tar.gz
      
      p
        | Now, when the file is downloaded, it will be saved to <code>./MyProject-1.2.tar.gz</code>.
      
      h4 Upload with an Explicit Name and Tag
      
      pre
        | $ http --form POST http://localhost:3000/v1/files/my-project/releases/latest \
        |        file@./release.tar.gz \
        |        name=MyProject-1.2.tar.gz \
        |        tag=v1.2
      
      h4 Upload a New Write-Protected File
      
      p
        | In this example, the file <code>./song.mp3</code> is uploaded to 
        | the URL <code>/band/album/song.mp3</code>. The <code>protect</code> field
        | is set to <code>"true"</code> so that the file is write-protected with
        | an automatically generated API key.
      
      pre
        | $ http --form POST http://localhost:3000/v1/files/band/album/song.mp3 \
        |        file@./song.mp3 \
        |        protect=true
      
      p
        | The returned JSON object will contain an <code>apiKey</code> attribute
        | that holds the write-protection key required to modify the file.
      
      h4 Upload am Existing Write-Protected File
      
      pre
        | $ http --form POST http://localhost:3000/v1/files/band/album/song.mp3 \
        |        file@./song-2.mp3 \
        |        apiKey=55a46b05143bce572b0f523c
      
      p
        | The specified API key must match the API key specified when the file was
        | first uploaded or, if the file was uploaded with `protect=true`, the API
        | Key returned by the server after initial upload.
